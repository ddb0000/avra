# -*- coding: utf-8 -*-
"""
DataScientist Bot ‚Äî this could be a real product. gemini-powered, python agent, feedback loop. give it a terminal and notebook interface, maybe as a vscode extension or jupyter plugin. if it‚Äôs really strong, spin it as a lab assistant, scientist co-pilot.
# Projeto Leviat√£ V8.2: AI com Execu√ß√£o Local

**Objetivo:** Adaptar o chat interativo com execu√ß√£o de c√≥digo local (V8.1) para rodar como um script Python independente, fora do ambiente Google Colab.

**Filosofia:** Entregar a capacidade do AI Data Scientist auto-corretivo em um pacote simples e compartilh√°vel (um arquivo .py).

**Componentes:**
- Cria√ß√£o de uma Sess√£o de Chat (SEM ferramentas built-in)
- Wrapper para Execu√ß√£o de C√≥digo Python Local Segura
- Loop de Chat Interativo
- **AJUSTE:** Leitura de API Key apenas de vari√°vel de ambiente.
- **AJUSTE:** Cria√ß√£o de arquivo CSV de teste no diret√≥rio local do script.
- **REMO√á√ÉO:** C√≥digo espec√≠fico do Colab.

**Stack:**
- google-generativeai
- pandas, numpy, scikit-learn, matplotlib
- io, sys, re, time
- **REQUISITO:** Python 3.8+ (para re.search no bloco de c√≥digo)
"""
print("üöÄ Iniciando ...")
import google.generativeai as genai
import os
import textwrap
import sys
import io
import re 
import time
from google.genai import types
import numpy as np
import pandas as pd
from dotenv import load_dotenv

load_dotenv()


# ---------------
# Configura√ß√£o do Modelo
# ---------------

# Modelo que suporta chat e √© bom em gerar/entender c√≥digo
MODEL_NAME = 'gemini-2.5-flash-preview-04-17' 
# MODEL_NAME = 'gemini-1.5-flash-latest'

API_DELAY_SECONDS = 4 # Delay entre chamadas p/ rate limit

print(f"\nü§ñ Modelo Carregado: {MODEL_NAME}")

# N√ÉO CONFIGURAMOS FERRAMENTAS NA INICIALIZA√á√ÉO PARA EVITAR O ERRO!
# O AI VAI APENAS GERAR O C√ìDIGO COMO TEXTO E NOSSO SCRIPT VAI DETECTAR E EXECUTAR.
tools_list = None


# ---------------
# Wrapper para Execu√ß√£o de C√≥digo Python Local
# ---------------

def execute_code_locally(code_string: str) -> str:
    """
    Executa um string de c√≥digo Python localmente e captura stdout/stderr/erros.
    Retorna uma string formatada com o resultado para o AI.
    """
    print("\n--- EXECUTANDO C√ìDIGO LOCALMENTE ---")
    print(code_string) # Mostra o c√≥digo que est√° sendo executado
    print("------------------------------------")

    old_stdout = sys.stdout
    old_stderr = sys.stderr
    redirected_output = io.StringIO()
    redirected_error = io.StringIO()
    sys.stdout = redirected_output
    sys.stderr = redirected_error

    execution_result = ""
    success = False
    try:
        # Use exec() para m√∫ltiplos statements. globals() para acesso ao ambiente.
        # O ambiente onde o script .py roda √© o "local".
        exec(code_string, globals()) # globals() permite acesso a vari√°veis definidas antes (ex: pandas, numpy, vari√°veis criadas em execu√ß√µes anteriores)

        stdout_output = redirected_output.getvalue()
        stderr_output = redirected_error.getvalue()

        if stdout_output:
            execution_result += f"--- STDOUT ---\n```text\n{stdout_output.strip()}\n```\n"
        if stderr_output:
             execution_result += f"--- STDERR ---\n```text\n{stderr_output.strip()}\n```\n"

        if not stdout_output and not stderr_output:
             execution_result = "--- EXECUTION SUCCESS ---\n```text\nC√≥digo executado com sucesso, sem output.\n```\n"


    except Exception as e:
        import traceback
        tb_output = traceback.format_exc()
        execution_result = f"--- EXECUTION ERROR ---\n```text\n{tb_output.strip()}\n```\n"

    finally:
        # Restaura stdout e stderr
        sys.stdout = old_stdout
        sys.stderr = old_stderr

    print("--- FIM DA EXECU√á√ÉO LOCAL ---")

    return execution_result


# ---------------
# OPCIONAL
# Cria√ß√£o do Arquivo CSV de Teste Local (no diret√≥rio do script)
# ---------------

BASE_DIR = os.path.dirname(os.path.abspath(__file__)) if '__file__' in globals() else os.getcwd()
CSV_FILE_NAME = "sample_data.csv"
CSV_FILE_PATH_LOCAL = os.path.join(BASE_DIR, CSV_FILE_NAME)


def create_sample_csv(file_path):
    """Cria um arquivo CSV de exemplo no caminho especificado."""
    print(f"\nüìù Criando arquivo CSV de teste em: {file_path}")
    # Simula um dataset B2B simples com alguns NaNs e tipos misturados
    data = {
        'ClienteID': [f'CLI_{i:03d}' for i in range(10)],
        'ValorServico': [150.5, 220.0, np.nan, 180.0, 300.0, 120.0, 450.0, np.nan, 200.0, 250.0],
        'MesesContrato': [12, 24, 18, 12, 36, 12, 24, 18, 12, 24],
        'TipoCliente': ['Novo', 'Existente', 'Novo', 'Existente', 'Existente', 'Novo', 'Existente', 'Novo', 'Existente', 'Novo'],
        'Ativo': [True, False, True, True, False, True, True, False, True, True]
    }
    df_sample = pd.DataFrame(data)

    df_sample.loc[2, 'TipoCliente'] = np.nan

    os.makedirs(os.path.dirname(file_path), exist_ok=True)

    df_sample.to_csv(file_path, index=False)
    print(f"‚úÖ Arquivo CSV '{file_path}' criado com sucesso.")
    print("Head do arquivo criado:")
    print(df_sample.head())
    print("-" * 30)


create_sample_csv(CSV_FILE_PATH_LOCAL)


# ---------------
# Iniciando a Sess√£o de Chat
# ---------------

# Instru√ß√£o inicial
INITIAL_AI_INSTRUCTION = f"Voc√™ √© um AI Data Scientist com acesso a um ambiente Python local com as bibliotecas pandas, numpy, scikit-learn e matplotlib. Voc√™ pode executar c√≥digo Python colocando-o em blocos ```python\\n...\\n```. Se o c√≥digo executar e tiver output ou erro, o resultado ser√° enviado de volta para voc√™ para an√°lise. Analise o resultado e continue a tarefa ou corrija o c√≥digo. Se n√£o precisar executar c√≥digo, responda normalmente."

print("\nüí¨ Iniciando Sess√£o de Chat com Execu√ß√£o Local...")

# Cria a sess√£o de chat SEM FERRAMENTAS built-in, mas com instru√ß√£o inicial
model_chat = genai.GenerativeModel(model_name=MODEL_NAME)
chat_session = model_chat.start_chat()
response = chat_session.send_message(INITIAL_AI_INSTRUCTION)

print(f"‚úÖ Sess√£o de chat iniciada com o modelo {MODEL_NAME}.")
print("AI (Instru√ß√£o Inicial):")
print(INITIAL_AI_INSTRUCTION)
print("-" * 30)
print("Digite suas mensagens. Digite 'sair' ou 'quit' para encerrar.")
print("O AI pode gerar blocos de c√≥digo Python que ser√£o executados localmente.")
print("-" * 30)


# ---------------
# Loop de Chat Interativo com Feedback Loop de Execu√ß√£o Local
# ---------------

while True:
    try:
        user_input = input("Voc√™: ")
        if user_input.lower() in ['sair', 'quit']:
            print("Encerrando chat.")
            break

        # --- 7a: Envia a mensagem do usu√°rio e pega a primeira resposta do AI ---

        response = chat_session.send_message(user_input)

        # --- 7b: Processa a resposta do AI ---
        print("AI:")
        code_to_execute = None
        ai_response_text = "" # Acumula todo o texto da resposta do AI neste turno

        if response.candidates:
            for candidate in response.candidates:
                if candidate.content and candidate.content.parts:
                    for part in candidate.content.parts:
                        if part.text:
                            ai_response_text += part.text
                            # Detecta bloco de c√≥digo Python ou gen√©rico
                            code_match_python = re.search(r'```python\n(.*?)\n```', part.text, re.DOTALL)
                            if code_match_python:
                                code_to_execute = code_match_python.group(1).strip()
                            if code_to_execute is None: # Tenta o gen√©rico se o python n√£o achou
                                code_match_generic = re.search(r'```\n(.*?)\n```', part.text, re.DOTALL)
                                if code_match_generic:
                                    code_to_execute = code_match_generic.group(1).strip()


                    # Imprime a resposta neste turno
                    print(ai_response_text, end="")


                else:
                    # Caso o candidate n√£o tenha content/parts (ex: blocked)
                    if response.finish_reason:
                        print(f"[Resposta finalizada por: {response.finish_reason}]", end="")
                    if response.safety_ratings:
                        print(f"[Safety Ratings: {response.safety_ratings}]", end="")
            # Nova linha ap√≥s a resposta inicial
            print("\n" + "-" * 30)

        else:
            # Caso a resposta inteira seja blocked ou vazia
            if response.prompt_feedback:
                if response.prompt_feedback.block_reason:
                    print(f"[Resposta BLOQUEADA. Raz√£o: {response.prompt_feedback.block_reason}]")
                if response.prompt_feedback.safety_ratings:
                    print(f"[Prompt Safety Ratings: {response.prompt_feedback.safety_ratings}]")
            else:
                print("[Resposta inicial vazia ou com problema.]")
            print("-" * 30)


        # --- 7c: Executa o c√≥digo localmente se detectado ---
        if code_to_execute:
            # Adiciona um pequeno delay antes de executar c√≥digo pra simular "pensamento" ou rate limit
            time.sleep(2)
            execution_feedback_for_ai = execute_code_locally(code_to_execute)
            print("‚úÖ Execu√ß√£o conclu√≠da.")
            print("-" * 30)

            # --- 7d: Envia o resultado da execu√ß√£o de volta ---
            # Feedback loop
            print("üß† Enviando resultado da execu√ß√£o de volta para o AI para o pr√≥ximo turno...")
            # Formata o resultado como uma mensagem do "ambiente" ou "tool" para o AI
            # Usando um formato de texto simples que o AI entenda que √© um resultado de c√≥digo
            feedback_message_content = f"""
            O c√≥digo Python que voc√™ gerou foi executado.
            Aqui est√° o resultado da execu√ß√£o:
            {execution_feedback_for_ai}

            Por favor, analise este resultado e continue a conversa com o usu√°rio.
            **Se o c√≥digo rodou com sucesso e produziu output, por favor, inclua o output relevante (o texto dentro dos blocos ```text\n...\n```) na sua resposta para o usu√°rio.**
            Se houve um erro, explique o erro para o usu√°rio e sugira o pr√≥ximo passo (talvez um c√≥digo corrigido), **incluindo o texto do erro na sua resposta.**
            """

            # Adiciona um pequeno delay antes de mandar o resultado de volta (rate limit)
            time.sleep(API_DELAY_SECONDS)
            # Envia a mensagem de feedback
            response_after_execution = chat_session.send_message(feedback_message_content)

            # Processa e imprime a RESPOSTA AP√ìS VER O RESULTADO
            print("AI (ap√≥s execu√ß√£o do c√≥digo):")
            if response_after_execution.candidates:
                for candidate in response_after_execution.candidates:
                    if candidate.content and candidate.content.parts:
                        for part in candidate.content.parts:
                            if part.text:
                                print(part.text, end="")
                            # Se gerar MAIS c√≥digo aqui, o loop principal vai detectar na PR√ìXIMA rodada
                    else:
                        if response.finish_reason:
                            print(f"[Resposta finalizada por: {response.finish_reason}]", end="")
                        if candidate.safety_ratings:
                            print(f"[Safety Ratings: {candidate.safety_ratings}]", end="")
                print("\n" + "-" * 30) # Nova linha ap√≥s a resposta completa
            else:
                if response_after_execution.prompt_feedback:
                    if response_after_execution.prompt_feedback.block_reason:
                        print(f"[Resposta BLOQUEADA ap√≥s execu√ß√£o. Raz√£o: {response.prompt_feedback.block_reason}]")
                    if response_after_execution.prompt_feedback.safety_ratings:
                        print(f"[Prompt Safety Ratings ap√≥s execu√ß√£o: {response.prompt_feedback.safety_ratings}]")
                    else:
                        print("[Resposta do AI ap√≥s execu√ß√£o vazia ou com problema.]")
                    print("-" * 30)


        # O loop continua, pedindo nova entrada do usu√°rio ou processando nova resposta
        # (se gerou c√≥digo e respondeu ao resultado)

    except Exception as e:
        print(f"‚ùå Ocorreu um erro CR√çTICO no loop principal do chat: {e}")
        # Quebra o loop se der um erro que impe√ßa a continua√ß√£o
        import traceback
        print(traceback.format_exc())
        break


# ---------------
# 8. Fim do Script
# ---------------
print("\nScript encerrado.")